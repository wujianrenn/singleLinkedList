# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.


package LinkedList;

import java.util.Stack;

public class SingleLinkedListDemo {
    public static void main(String[] args) {
        //进行测试
        //先创建节点
        HeroNode hero1 = new HeroNode(1, "宋江", "及时雨");
        HeroNode hero2 = new HeroNode(2, "卢俊义", "玉麒麟");
        HeroNode hero3 = new HeroNode(3, "吴用", "智多星");
        HeroNode hero4 = new HeroNode(4, "林冲", "豹子头");

        //创建要给链表
        SingleLinkList singleLinkList = new SingleLinkList();
        //加入
        /**singleLinkList.add(hero1);
        singleLinkList.add(hero2);
        singleLinkList.add(hero3);
        singleLinkList.add(hero4);
         */

        //第二种加入方式（按照编号的顺序加入）
        singleLinkList.addByOrder(hero4) ;
        singleLinkList.addByOrder(hero2) ;
        singleLinkList.addByOrder(hero3) ;
        singleLinkList.addByOrder(hero1) ;

        //测试修改的代码
        System.out.println("--------------------");
        HeroNode newHeroNode = new HeroNode(2,"小卢","玉麒麟~~~");
        singleLinkList.update(newHeroNode);
        singleLinkList.list();
        /**
         * 有问题，在修改处
         */

        //显示
        System.out.println("-------------------");
        singleLinkList.list();

        //删除一个节点
        singleLinkList.del(1);
        System.out.println("删除后的链表情况");
        singleLinkList.list();

        System.out.println("-------单链表中有效节点的个数--------");
        System.out.println(getLength(singleLinkList.getHead()));

        System.out.println("-----------得到倒数第k个节点------------");
        HeroNode res = findLastIndexNode(singleLinkList.getHead(),2);
        System.out.println(res);

        System.out.println("------------测试一下单链表的反转功能,结构改变了------------");
        reversetList(singleLinkList.getHead());
        singleLinkList.list();

        System.out.println("------------逆序打印单链表，不改变链表结构-------------");
        reversePrint(singleLinkList.getHead());
    }

    /**逆序打印单链表*/
    //可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的先进后出特性，就实现了单链表的逆序打印
    public static void reversePrint(HeroNode head){
        if(head.next == null){
            return;//空链表，不能打印
        }
        //创建要给一个栈，将各个节点压入栈
        Stack<HeroNode>stack = new Stack<HeroNode>();
        HeroNode cur = head.next;
        //将链表的所有节点都压入栈
        while(cur != null){
            stack.push(cur);
            cur = cur.next;//cur 后移这样就可以压入下一个节点了
        }
        //将栈中的节点进行打印，pop出栈
        while(stack.size() > 0){
            System.out.println(stack.pop());//stack的特点就是先进后出
        }
    }

    /**将单链表反转*/
    public static void reversetList(HeroNode head){
        //如果当前链表为空，或者只有一个节点，则无需反转，直接返回
        if(head.next == null || head.next.next == null){
            return ;
        }
        //定义一个辅助变量（指针），帮助我们遍历原来的链表
        HeroNode cur = head.next;
        HeroNode next = null;//指向当前节点[cur]
        HeroNode reverseHead = new HeroNode(0,"","");
        //遍历原来的链表，遍历每一个节点，就将其取出，并放在新的链表reversetList的最前端
        //有难度
        while(cur != null){
            next = cur.next;//先暂时保存当前节点的下一个节点，因为后面要用到
            cur.next = reverseHead.next;//将cur的下一个节点指向新的链表的最前端（将两个节点相连）
            reverseHead.next = cur;//让新链表的头部与cur连接（接第一根线）
            cur = next;//让cur后移
        }
        //
        head.next = reverseHead.next;
    }

    /**查找单链表中倒数第k个节点*/
    //思路：
    //1.编写一个方法，接收head节点，同时接收一个index
    //2.index 表示是倒数第k个节点
    //3.先把链表从头到尾遍历，得到链表的总长度getlength
    //4.得到size之后，我们从链表的第一个开始遍历（getlength - index）个，就可以得到
    //5.如果找到了，就返回该节点，否则返回null
     public static HeroNode findLastIndexNode(HeroNode head,int index){
        //判断如果链表为空，则返回null
         if(head.next == null){
             return null;//没有找到
         }
         //第一个遍历得到链表的长度（节点个数）
         int size = getLength(head);
         //第二次遍历 size - index 位置，就是我们倒数第k个节点啊
         //先做一个index的校验
         if(index <=0 || index > size){
             return null;
         }
         //定义个辅助变量
         HeroNode cur = head.next;
         for (int i = 0; i < size - index; i++) {
             cur = cur.next;
         }
         return cur;
     }

    /**
     *方法：获取到单链表的节点的个数（如果是带头节点的链表，需求不统计头节点）
     * @param head 链表的头节点
     * @return 返回的就是有效节点的个数
     */
    public static int getLength(HeroNode head){
        if(head.next == null){
            //空链表
            return 0;
        }int length = 0;
        //定义一个辅助变量
        HeroNode cur = head.next;
        while(cur != null){
            length++;
            cur = cur.next;//遍历
        }
        return length;
    }
}

//定义SingleLinkedList 管理我们的英雄
class SingleLinkList {
    //先初始化一个头节点，头节点不动，不要放具体的数据（头节点要是改变了，那么整个单链表也会发生改变！）
    private HeroNode head = new HeroNode(0, "", "");

       //返回头节点
       public HeroNode getHead() {
            return head;
       }


    /**添加节点到单链表中*/
    //思路：不考虑编号顺序时
    //1.找到当前链表的最后节点
    //2.将最后这个节点的next指向新的节点
    public void add(HeroNode heroNode) {
        //因为head节点不能动，因此我们需要一个辅助遍历 temp
        HeroNode temp = head;
        //遍历单链表，找到最后
        while (true) {
            //找到链表的最后
            if (temp.next == null) {
                break;
            }
            //如果没有找到最后，将会把temp后移
            temp = temp.next;
        }
        //当退出while循环时，temp指向了链表的最后
        //将最后的这个节点的next 指向新的节点
        temp.next = heroNode;
    }

    /**第二种方式在添加英雄时，根据排名将英雄插入到指定位置*/
    // （如果有这个排名，则代表添加失败，并给出提示）
    public void addByOrder(HeroNode heroNode){
        //因为头节点不能动，所以我们仍然需要通过一个辅助指针（变量）来帮助找到添加的位置
        //因为单链表，因为我们找的temp是位于添加辅助位置的前一个节点，否则插入不了
        HeroNode temp = head;
        boolean flag = false;
        while(true){
            if(temp.next == null){
                //说明temp已经到了链表的最后
                break;
            }
            if(temp.next.no > heroNode.no ){
                //位置找到了，就在temp的后面插入
                break;
            }else if(temp.next.no == heroNode.no){
                //说明希望添加的heroNode的编号已将存在
                flag = true;//说明编号存在
                break;
            }
            temp = temp.next;//遍历，后移
        }
        //判断flag的值
        if(flag){
            //不能添加，说明编号存在
            System.out.println("准备插入的英雄的编号" + heroNode.no + "已经存在了，不能加入了！");
        }else{
            //插入到链表中，temp的后面
            heroNode.next  = temp.next;
            temp.next = heroNode;
        }
    }


    /**修改节点的信息，根据no编号来修改，及no编号不能改*/
    //说明
    //1.根据newHeroNode 的 no 来修改即可
    public void update (HeroNode newHeroNode){
        //判断是否为空
        if(head.next == null){
            System.out.println("链表为空");
            return;
        }
        //找到需要修改的编号，根据no编号
        //定义一个辅助变量
        HeroNode temp = head.next;
        boolean flag = false;//表示是否找到该节点
        while (true) {
            if(temp==null){
                break;//已经遍历完该链表
            }
            if(temp.no == newHeroNode.no){
                //找到
                flag = true;
                break;
            }
            temp = temp.next;
        }
        //根据flag判断是否找到要修改的节点
        if(flag){
            temp.name = newHeroNode.name;
            temp.nickname = newHeroNode.nickname;
        }else{
            //没有找到
            System.out.println("没有找到该编号" + newHeroNode.no + "不能修改！");
        }
    }

    /**删除节点*/
    //思路
    //1.head 不能动，因此我们需要一个temp 辅助变量来找到待删除节点的前一个节点
    //2.说明我们在比较时，是temp.next.no 和 需要删除的节点的no比较
    public void del(int no){
           HeroNode temp = head;
           boolean flag = false;//标志是否找到待删除的节点
        while (true) {
            if(temp.next == null){
                //已经到链表最后
                break;
            }
            if(temp.next.no == no){
                //找到的待删除节点的前一个节点temp
                flag = true;
                break;
            }
            temp = temp.next;//temp后移，遍历
        }
        //判断flag
        if(flag){//找到
            //可以删除
            temp.next = temp.next.next;
        }else{
            System.out.println("要删除的" +no + "节点不存在！");
        }
    }

    /**显示链表[遍历]*/
    public void list() {
        //判断链表是否为空
        if (head.next == null) {
            System.out.println("链表为空");
            return;
        }
        //因为头节点，不能动，因此我们需要一个辅助变量来遍历
        HeroNode temp = head.next;
        while(true){
            //判断是否到链表最后
            if( temp == null){
            break;
            }
            //输出节点的信息（说明已经到最后了）
            System.out.println(temp);
            //将temp后移，一定小心
            temp = temp.next;
        }
    }
}


//定义HeroNode，每个HeroNode 对象就是一个节点
class HeroNode{

    public int no;
    public String name;
    public String nickname;//昵称
    public HeroNode next;//指向下一个节点

    //构造有参构造器
    public HeroNode(int no, String name, String nickname) {
        this.no = no;
        this.name = name;
        this.nickname = nickname;
    }

    //为了显示方法，重写toString
    @Override
    public String toString() {
        return "HeroNode{" +
                "no=" + no +
                ", name='" + name + '\'' +
                ", nickname='" + nickname +
                '}';
    }
}
